package controller

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"vulnark/internal/middleware"
	"vulnark/internal/model"
	"vulnark/internal/service"
	"vulnark/pkg/utils"
)

// VulnerabilityController 漏洞控制器
type VulnerabilityController struct {
	vulnService service.VulnerabilityService
}

// NewVulnerabilityController 创建漏洞控制器
func NewVulnerabilityController() *VulnerabilityController {
	return &VulnerabilityController{
		vulnService: service.NewVulnerabilityService(),
	}
}

// CreateVulnerability 创建漏洞
// @Summary 创建漏洞
// @Description 创建新的漏洞
// @Tags 漏洞管理
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Param request body model.VulnerabilityCreateRequest true "创建漏洞请求"
// @Success 200 {object} model.Response{data=model.Vulnerability}
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities [post]
func (c *VulnerabilityController) CreateVulnerability(ctx *gin.Context) {
	var req model.VulnerabilityCreateRequest
	if err := utils.BindAndValidate(ctx, &req); err != nil {
		return
	}

	// 获取当前用户ID作为发现人
	userID, exists := middleware.GetCurrentUserID(ctx)
	if !exists {
		utils.UnauthorizedResponse(ctx, "")
		return
	}

	vulnerability, err := c.vulnService.CreateVulnerability(&req, userID)
	if err != nil {
		utils.BadRequestResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, vulnerability)
}

// GetVulnerabilityList 获取漏洞列表
// @Summary 获取漏洞列表
// @Description 获取漏洞列表（分页）
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Param page query int false "页码" default(1)
// @Param page_size query int false "每页数量" default(10)
// @Param keyword query string false "搜索关键词"
// @Param severity_level query string false "严重程度"
// @Param status query string false "状态"
// @Param asset_id query string false "资产ID"
// @Param assignee_id query string false "分配人ID"
// @Param discoverer_id query string false "发现人ID"
// @Param owasp_category_id query string false "OWASP分类ID"
// @Param start_date query string false "开始日期"
// @Param end_date query string false "结束日期"
// @Success 200 {object} model.Response{data=model.PaginationResponse}
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities [get]
func (c *VulnerabilityController) GetVulnerabilityList(ctx *gin.Context) {
	var req model.VulnerabilitySearchRequest
	if err := utils.BindQueryAndValidate(ctx, &req); err != nil {
		return
	}

	// 设置默认值
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 10
	}

	resp, err := c.vulnService.GetVulnerabilityList(&req)
	if err != nil {
		utils.ServerErrorResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, resp)
}

// GetVulnerability 获取漏洞详情
// @Summary 获取漏洞详情
// @Description 根据ID获取漏洞详情
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Param id path int true "漏洞ID"
// @Success 200 {object} model.Response{data=model.VulnerabilityInfo}
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities/{id} [get]
func (c *VulnerabilityController) GetVulnerability(ctx *gin.Context) {
	idStr := ctx.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		utils.BadRequestResponse(ctx, "无效的漏洞ID")
		return
	}

	vulnerability, err := c.vulnService.GetVulnerabilityByID(uint(id))
	if err != nil {
		utils.NotFoundResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, vulnerability)
}

// UpdateVulnerability 更新漏洞
// @Summary 更新漏洞
// @Description 更新漏洞信息
// @Tags 漏洞管理
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Param id path int true "漏洞ID"
// @Param request body model.VulnerabilityUpdateRequest true "更新请求"
// @Success 200 {object} model.Response
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities/{id} [put]
func (c *VulnerabilityController) UpdateVulnerability(ctx *gin.Context) {
	idStr := ctx.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		utils.BadRequestResponse(ctx, "无效的漏洞ID")
		return
	}

	var req model.VulnerabilityUpdateRequest
	if err := utils.BindAndValidate(ctx, &req); err != nil {
		return
	}

	if err := c.vulnService.UpdateVulnerability(uint(id), &req); err != nil {
		utils.BadRequestResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, nil)
}

// DeleteVulnerability 删除漏洞
// @Summary 删除漏洞
// @Description 删除漏洞
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Param id path int true "漏洞ID"
// @Success 200 {object} model.Response
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities/{id} [delete]
func (c *VulnerabilityController) DeleteVulnerability(ctx *gin.Context) {
	idStr := ctx.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		utils.BadRequestResponse(ctx, "无效的漏洞ID")
		return
	}

	if err := c.vulnService.DeleteVulnerability(uint(id)); err != nil {
		utils.BadRequestResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, nil)
}

// GetVulnerabilityStats 获取漏洞统计
// @Summary 获取漏洞统计
// @Description 获取漏洞统计信息
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Success 200 {object} model.Response{data=model.VulnerabilityStats}
// @Failure 500 {object} model.Response
// @Router /api/v1/vulnerabilities/stats [get]
func (c *VulnerabilityController) GetVulnerabilityStats(ctx *gin.Context) {
	stats, err := c.vulnService.GetVulnerabilityStats()
	if err != nil {
		utils.ServerErrorResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, stats)
}

// UpdateVulnerabilityStatus 更新漏洞状态
// @Summary 更新漏洞状态
// @Description 更新漏洞状态
// @Tags 漏洞管理
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Param id path int true "漏洞ID"
// @Param request body map[string]string true "状态更新请求"
// @Success 200 {object} model.Response
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities/{id}/status [put]
func (c *VulnerabilityController) UpdateVulnerabilityStatus(ctx *gin.Context) {
	idStr := ctx.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		utils.BadRequestResponse(ctx, "无效的漏洞ID")
		return
	}

	var req map[string]string
	if err := utils.BindAndValidate(ctx, &req); err != nil {
		return
	}

	status, exists := req["status"]
	if !exists {
		utils.BadRequestResponse(ctx, "缺少状态参数")
		return
	}

	userID, exists := middleware.GetCurrentUserID(ctx)
	if !exists {
		utils.UnauthorizedResponse(ctx, "")
		return
	}

	if err := c.vulnService.UpdateVulnerabilityStatus(uint(id), status, userID); err != nil {
		utils.BadRequestResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, nil)
}

// AssignVulnerability 分配漏洞
// @Summary 分配漏洞
// @Description 分配漏洞给指定用户
// @Tags 漏洞管理
// @Accept json
// @Produce json
// @Security ApiKeyAuth
// @Param id path int true "漏洞ID"
// @Param request body map[string]uint true "分配请求"
// @Success 200 {object} model.Response
// @Failure 400 {object} model.Response
// @Router /api/v1/vulnerabilities/{id}/assign [post]
func (c *VulnerabilityController) AssignVulnerability(ctx *gin.Context) {
	idStr := ctx.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		utils.BadRequestResponse(ctx, "无效的漏洞ID")
		return
	}

	var req map[string]uint
	if err := utils.BindAndValidate(ctx, &req); err != nil {
		return
	}

	assigneeID, exists := req["assignee_id"]
	if !exists {
		utils.BadRequestResponse(ctx, "缺少分配人ID")
		return
	}

	assignerID, exists := middleware.GetCurrentUserID(ctx)
	if !exists {
		utils.UnauthorizedResponse(ctx, "")
		return
	}

	if err := c.vulnService.AssignVulnerability(uint(id), assigneeID, assignerID); err != nil {
		utils.BadRequestResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, nil)
}

// GetOWASPCategories 获取OWASP分类列表
// @Summary 获取OWASP分类列表
// @Description 获取所有OWASP分类
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Success 200 {object} model.Response{data=[]model.OWASPCategory}
// @Router /api/v1/vulnerabilities/owasp-categories [get]
func (c *VulnerabilityController) GetOWASPCategories(ctx *gin.Context) {
	categories, err := c.vulnService.GetOWASPCategories()
	if err != nil {
		utils.ServerErrorResponse(ctx, err.Error())
		return
	}

	utils.SuccessResponse(ctx, categories)
}

// GetSeverityLevels 获取严重程度列表
// @Summary 获取严重程度列表
// @Description 获取所有可用的严重程度
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Success 200 {object} model.Response{data=[]map[string]interface{}}
// @Router /api/v1/vulnerabilities/severity-levels [get]
func (c *VulnerabilityController) GetSeverityLevels(ctx *gin.Context) {
	levels := c.vulnService.GetSeverityLevels()
	utils.SuccessResponse(ctx, levels)
}

// GetStatusList 获取状态列表
// @Summary 获取状态列表
// @Description 获取所有可用的状态
// @Tags 漏洞管理
// @Produce json
// @Security ApiKeyAuth
// @Success 200 {object} model.Response{data=[]map[string]string}
// @Router /api/v1/vulnerabilities/status-list [get]
func (c *VulnerabilityController) GetStatusList(ctx *gin.Context) {
	statuses := c.vulnService.GetStatusList()
	utils.SuccessResponse(ctx, statuses)
}
