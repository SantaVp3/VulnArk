package service

import (
	"errors"
	"time"

	"vulnark/internal/model"
	"vulnark/internal/repository"
)

// VulnerabilityService 漏洞服务接口
type VulnerabilityService interface {
	CreateVulnerability(req *model.VulnerabilityCreateRequest, discovererID uint) (*model.Vulnerability, error)
	GetVulnerabilityByID(id uint) (*model.VulnerabilityInfo, error)
	UpdateVulnerability(id uint, req *model.VulnerabilityUpdateRequest) error
	DeleteVulnerability(id uint) error
	GetVulnerabilityList(req *model.VulnerabilitySearchRequest) (*model.PaginationResponse, error)
	GetVulnerabilityStats() (*model.VulnerabilityStats, error)
	UpdateVulnerabilityStatus(id uint, status string, userID uint) error
	AssignVulnerability(id uint, assigneeID uint, assignerID uint) error
	GetOWASPCategories() ([]*model.OWASPCategory, error)
	GetSeverityLevels() []map[string]interface{}
	GetStatusList() []map[string]string
	ValidateVulnerability(req *model.VulnerabilityCreateRequest) error
}

// vulnerabilityService 漏洞服务实现
type vulnerabilityService struct {
	vulnRepo     repository.VulnerabilityRepository
	assetRepo    repository.AssetRepository
	userRepo     repository.UserRepository
	owaspRepo    repository.OWASPCategoryRepository
}

// NewVulnerabilityService 创建漏洞服务
func NewVulnerabilityService() VulnerabilityService {
	return &vulnerabilityService{
		vulnRepo:  repository.NewVulnerabilityRepository(),
		assetRepo: repository.NewAssetRepository(),
		userRepo:  repository.NewUserRepository(),
		owaspRepo: repository.NewOWASPCategoryRepository(),
	}
}

// CreateVulnerability 创建漏洞
func (s *vulnerabilityService) CreateVulnerability(req *model.VulnerabilityCreateRequest, discovererID uint) (*model.Vulnerability, error) {
	// 验证漏洞数据
	if err := s.ValidateVulnerability(req); err != nil {
		return nil, err
	}

	// 验证资产是否存在
	if _, err := s.assetRepo.GetByID(req.AssetID); err != nil {
		return nil, errors.New("指定的资产不存在")
	}

	// 验证分配人是否存在
	if req.AssigneeID != nil {
		if _, err := s.userRepo.GetByID(*req.AssigneeID); err != nil {
			return nil, errors.New("指定的分配人不存在")
		}
	}

	// 验证OWASP分类是否存在
	if req.OWASPCategoryID != nil {
		if _, err := s.owaspRepo.GetByID(*req.OWASPCategoryID); err != nil {
			return nil, errors.New("指定的OWASP分类不存在")
		}
	}

	vulnerability := &model.Vulnerability{
		Title:             req.Title,
		Description:       req.Description,
		CVEID:             req.CVEID,
		CNVDID:            req.CNVDID,
		OWASPCategoryID:   req.OWASPCategoryID,
		SeverityLevel:     req.SeverityLevel,
		CVSSScore:         req.CVSSScore,
		AssetID:           req.AssetID,
		DiscovererID:      &discovererID,
		AssigneeID:        req.AssigneeID,
		Status:            model.StatusNew,
		ImpactScope:       req.ImpactScope,
		ReproductionSteps: req.ReproductionSteps,
		FixSuggestion:     req.FixSuggestion,
		DiscoveredAt:      time.Now(),
	}

	// 如果指定了分配人，则设置为处理中状态
	if req.AssigneeID != nil {
		vulnerability.Status = model.StatusProcessing
		now := time.Now()
		vulnerability.AssignedAt = &now
	}

	if err := s.vulnRepo.Create(vulnerability); err != nil {
		return nil, errors.New("创建漏洞失败")
	}

	return vulnerability, nil
}

// GetVulnerabilityByID 根据ID获取漏洞
func (s *vulnerabilityService) GetVulnerabilityByID(id uint) (*model.VulnerabilityInfo, error) {
	vulnerability, err := s.vulnRepo.GetByID(id)
	if err != nil {
		return nil, err
	}

	info := vulnerability.ToVulnerabilityInfo()
	return &info, nil
}

// UpdateVulnerability 更新漏洞
func (s *vulnerabilityService) UpdateVulnerability(id uint, req *model.VulnerabilityUpdateRequest) error {
	vulnerability, err := s.vulnRepo.GetByID(id)
	if err != nil {
		return err
	}

	// 更新字段
	if req.Title != "" {
		vulnerability.Title = req.Title
	}

	if req.Description != "" {
		vulnerability.Description = req.Description
	}

	if req.CVEID != "" {
		vulnerability.CVEID = req.CVEID
	}

	if req.CNVDID != "" {
		vulnerability.CNVDID = req.CNVDID
	}

	if req.OWASPCategoryID != nil {
		// 验证OWASP分类是否存在
		if _, err := s.owaspRepo.GetByID(*req.OWASPCategoryID); err != nil {
			return errors.New("指定的OWASP分类不存在")
		}
		vulnerability.OWASPCategoryID = req.OWASPCategoryID
	}

	if req.SeverityLevel != nil {
		vulnerability.SeverityLevel = *req.SeverityLevel
	}

	if req.CVSSScore != nil {
		vulnerability.CVSSScore = req.CVSSScore
	}

	if req.AssigneeID != nil {
		// 验证分配人是否存在
		if _, err := s.userRepo.GetByID(*req.AssigneeID); err != nil {
			return errors.New("指定的分配人不存在")
		}
		vulnerability.AssigneeID = req.AssigneeID
	}

	if req.Status != "" {
		vulnerability.Status = req.Status
		// 根据状态设置相应的时间戳
		now := time.Now()
		switch req.Status {
		case model.StatusProcessing:
			if vulnerability.AssignedAt == nil {
				vulnerability.AssignedAt = &now
			}
		case model.StatusFixed:
			vulnerability.FixedAt = &now
		case model.StatusVerified:
			vulnerability.VerifiedAt = &now
		case model.StatusClosed:
			vulnerability.ClosedAt = &now
		}
	}

	if req.ImpactScope != "" {
		vulnerability.ImpactScope = req.ImpactScope
	}

	if req.ReproductionSteps != "" {
		vulnerability.ReproductionSteps = req.ReproductionSteps
	}

	if req.FixSuggestion != "" {
		vulnerability.FixSuggestion = req.FixSuggestion
	}

	return s.vulnRepo.Update(vulnerability)
}

// DeleteVulnerability 删除漏洞
func (s *vulnerabilityService) DeleteVulnerability(id uint) error {
	// 检查漏洞是否存在
	if _, err := s.vulnRepo.GetByID(id); err != nil {
		return err
	}

	return s.vulnRepo.Delete(id)
}

// GetVulnerabilityList 获取漏洞列表
func (s *vulnerabilityService) GetVulnerabilityList(req *model.VulnerabilitySearchRequest) (*model.PaginationResponse, error) {
	vulnerabilities, total, err := s.vulnRepo.List(req)
	if err != nil {
		return nil, err
	}

	// 转换为漏洞信息
	var vulnInfos []model.VulnerabilityInfo
	for _, vuln := range vulnerabilities {
		vulnInfos = append(vulnInfos, vuln.ToVulnerabilityInfo())
	}

	return model.NewPaginationResponse(total, req.Page, req.PageSize, vulnInfos), nil
}

// GetVulnerabilityStats 获取漏洞统计
func (s *vulnerabilityService) GetVulnerabilityStats() (*model.VulnerabilityStats, error) {
	return s.vulnRepo.GetStats()
}

// UpdateVulnerabilityStatus 更新漏洞状态
func (s *vulnerabilityService) UpdateVulnerabilityStatus(id uint, status string, userID uint) error {
	// 检查漏洞是否存在
	if _, err := s.vulnRepo.GetByID(id); err != nil {
		return err
	}

	// 验证状态
	validStatuses := []string{model.StatusNew, model.StatusProcessing, model.StatusFixed, model.StatusVerified, model.StatusClosed}
	isValidStatus := false
	for _, validStatus := range validStatuses {
		if status == validStatus {
			isValidStatus = true
			break
		}
	}
	if !isValidStatus {
		return errors.New("无效的状态")
	}

	return s.vulnRepo.UpdateStatus(id, status, userID)
}

// AssignVulnerability 分配漏洞
func (s *vulnerabilityService) AssignVulnerability(id uint, assigneeID uint, assignerID uint) error {
	// 检查漏洞是否存在
	if _, err := s.vulnRepo.GetByID(id); err != nil {
		return err
	}

	// 验证分配人是否存在
	if _, err := s.userRepo.GetByID(assigneeID); err != nil {
		return errors.New("指定的分配人不存在")
	}

	return s.vulnRepo.AssignToUser(id, assigneeID, assignerID)
}

// GetOWASPCategories 获取OWASP分类列表
func (s *vulnerabilityService) GetOWASPCategories() ([]*model.OWASPCategory, error) {
	return s.owaspRepo.GetAll()
}

// GetSeverityLevels 获取严重程度列表
func (s *vulnerabilityService) GetSeverityLevels() []map[string]interface{} {
	return []map[string]interface{}{
		{"value": model.SeverityCritical, "label": "严重", "color": "#ff4d4f"},
		{"value": model.SeverityHigh, "label": "高危", "color": "#ff7a45"},
		{"value": model.SeverityMedium, "label": "中危", "color": "#ffa940"},
		{"value": model.SeverityLow, "label": "低危", "color": "#52c41a"},
	}
}

// GetStatusList 获取状态列表
func (s *vulnerabilityService) GetStatusList() []map[string]string {
	return []map[string]string{
		{"value": model.StatusNew, "label": "新建"},
		{"value": model.StatusProcessing, "label": "处理中"},
		{"value": model.StatusFixed, "label": "已修复"},
		{"value": model.StatusVerified, "label": "已验证"},
		{"value": model.StatusClosed, "label": "已关闭"},
	}
}

// ValidateVulnerability 验证漏洞数据
func (s *vulnerabilityService) ValidateVulnerability(req *model.VulnerabilityCreateRequest) error {
	if req.Title == "" {
		return errors.New("漏洞标题不能为空")
	}

	if req.AssetID == 0 {
		return errors.New("必须指定关联资产")
	}

	// 验证严重程度
	if req.SeverityLevel < 1 || req.SeverityLevel > 4 {
		return errors.New("无效的严重程度")
	}

	// 验证CVSS评分
	if req.CVSSScore != nil {
		if *req.CVSSScore < 0 || *req.CVSSScore > 10 {
			return errors.New("CVSS评分必须在0-10之间")
		}
	}

	return nil
}
