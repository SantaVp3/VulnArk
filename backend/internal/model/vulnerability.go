package model

import (
	"time"
)

// OWASPCategory OWASP分类模型
type OWASPCategory struct {
	ID            uint      `json:"id" gorm:"primarykey"`
	CreatedAt     time.Time `json:"created_at"`
	Code          string    `json:"code" gorm:"size:20;not null;uniqueIndex"`
	Name          string    `json:"name" gorm:"size:100;not null"`
	Description   string    `json:"description" gorm:"type:text"`
	Year          int       `json:"year" gorm:"default:2021"`
	SeverityLevel int       `json:"severity_level" gorm:"default:3"` // 1-高，2-中，3-低
}

// TableName 指定表名
func (OWASPCategory) TableName() string {
	return "owasp_categories"
}

// Vulnerability 漏洞模型
type Vulnerability struct {
	ID               uint           `json:"id" gorm:"primarykey"`
	CreatedAt        time.Time      `json:"created_at"`
	UpdatedAt        time.Time      `json:"updated_at"`
	Title            string         `json:"title" gorm:"size:255;not null" binding:"required"`
	Description      string         `json:"description" gorm:"type:text"`
	CVEID            string         `json:"cve_id" gorm:"size:50"`
	CNVDID           string         `json:"cnvd_id" gorm:"size:50"`
	OWASPCategoryID  *uint          `json:"owasp_category_id"`
	SeverityLevel    int            `json:"severity_level" gorm:"not null" binding:"required,oneof=1 2 3 4"`
	CVSSScore        *float64       `json:"cvss_score" gorm:"type:decimal(3,1)"`
	AssetID          uint           `json:"asset_id" gorm:"not null" binding:"required"`
	DiscovererID     *uint          `json:"discoverer_id"`
	AssigneeID       *uint          `json:"assignee_id"`
	Status           string         `json:"status" gorm:"size:20;default:new"`
	ImpactScope      string         `json:"impact_scope" gorm:"type:text"`
	ReproductionSteps string        `json:"reproduction_steps" gorm:"type:text"`
	FixSuggestion    string         `json:"fix_suggestion" gorm:"type:text"`
	DiscoveredAt     time.Time      `json:"discovered_at" gorm:"default:CURRENT_TIMESTAMP"`
	AssignedAt       *time.Time     `json:"assigned_at"`
	FixedAt          *time.Time     `json:"fixed_at"`
	VerifiedAt       *time.Time     `json:"verified_at"`
	ClosedAt         *time.Time     `json:"closed_at"`

	// 关联
	Asset         Asset          `json:"asset" gorm:"foreignKey:AssetID"`
	Discoverer    *User          `json:"discoverer,omitempty" gorm:"foreignKey:DiscovererID"`
	Assignee      *User          `json:"assignee,omitempty" gorm:"foreignKey:AssigneeID"`
	OWASPCategory *OWASPCategory `json:"owasp_category,omitempty" gorm:"foreignKey:OWASPCategoryID"`
	Attachments   []VulnerabilityAttachment `json:"attachments,omitempty" gorm:"foreignKey:VulnerabilityID"`
}

// TableName 指定表名
func (Vulnerability) TableName() string {
	return "vulnerabilities"
}

// VulnerabilityAttachment 漏洞附件模型
type VulnerabilityAttachment struct {
	ID              uint      `json:"id" gorm:"primarykey"`
	CreatedAt       time.Time `json:"created_at"`
	VulnerabilityID uint      `json:"vulnerability_id" gorm:"not null"`
	Filename        string    `json:"filename" gorm:"size:255;not null"`
	OriginalName    string    `json:"original_name" gorm:"size:255;not null"`
	FilePath        string    `json:"file_path" gorm:"size:500;not null"`
	FileSize        int64     `json:"file_size" gorm:"not null"`
	FileType        string    `json:"file_type" gorm:"size:100"`
	UploaderID      uint      `json:"uploader_id" gorm:"not null"`

	// 关联
	Uploader User `json:"uploader" gorm:"foreignKey:UploaderID"`
}

// TableName 指定表名
func (VulnerabilityAttachment) TableName() string {
	return "vulnerability_attachments"
}

// VulnerabilityCreateRequest 漏洞创建请求
type VulnerabilityCreateRequest struct {
	Title             string   `json:"title" binding:"required,min=1,max=255"`
	Description       string   `json:"description"`
	CVEID             string   `json:"cve_id"`
	CNVDID            string   `json:"cnvd_id"`
	OWASPCategoryID   *uint    `json:"owasp_category_id"`
	SeverityLevel     int      `json:"severity_level" binding:"required,oneof=1 2 3 4"`
	CVSSScore         *float64 `json:"cvss_score" binding:"omitempty,min=0,max=10"`
	AssetID           uint     `json:"asset_id" binding:"required"`
	AssigneeID        *uint    `json:"assignee_id"`
	ImpactScope       string   `json:"impact_scope"`
	ReproductionSteps string   `json:"reproduction_steps"`
	FixSuggestion     string   `json:"fix_suggestion"`
}

// VulnerabilityUpdateRequest 漏洞更新请求
type VulnerabilityUpdateRequest struct {
	Title             string   `json:"title" binding:"omitempty,min=1,max=255"`
	Description       string   `json:"description"`
	CVEID             string   `json:"cve_id"`
	CNVDID            string   `json:"cnvd_id"`
	OWASPCategoryID   *uint    `json:"owasp_category_id"`
	SeverityLevel     *int     `json:"severity_level" binding:"omitempty,oneof=1 2 3 4"`
	CVSSScore         *float64 `json:"cvss_score" binding:"omitempty,min=0,max=10"`
	AssigneeID        *uint    `json:"assignee_id"`
	Status            string   `json:"status" binding:"omitempty,oneof=new processing fixed verified closed"`
	ImpactScope       string   `json:"impact_scope"`
	ReproductionSteps string   `json:"reproduction_steps"`
	FixSuggestion     string   `json:"fix_suggestion"`
}

// VulnerabilitySearchRequest 漏洞搜索请求
type VulnerabilitySearchRequest struct {
	Keyword         string `json:"keyword" form:"keyword"`
	SeverityLevel   string `json:"severity_level" form:"severity_level"`
	Status          string `json:"status" form:"status"`
	AssetID         string `json:"asset_id" form:"asset_id"`
	AssigneeID      string `json:"assignee_id" form:"assignee_id"`
	DiscovererID    string `json:"discoverer_id" form:"discoverer_id"`
	OWASPCategoryID string `json:"owasp_category_id" form:"owasp_category_id"`
	StartDate       string `json:"start_date" form:"start_date"`
	EndDate         string `json:"end_date" form:"end_date"`
	PaginationRequest
}

// VulnerabilityStats 漏洞统计
type VulnerabilityStats struct {
	Total           int64                    `json:"total"`
	BySeverity      map[string]int64         `json:"by_severity"`
	ByStatus        map[string]int64         `json:"by_status"`
	ByOWASP         map[string]int64         `json:"by_owasp"`
	ByAssetType     map[string]int64         `json:"by_asset_type"`
	RecentTrend     []VulnerabilityTrendItem `json:"recent_trend"`
}

// VulnerabilityTrendItem 漏洞趋势项
type VulnerabilityTrendItem struct {
	Date  string `json:"date"`
	Count int64  `json:"count"`
}

// VulnerabilityInfo 漏洞信息（用于响应）
type VulnerabilityInfo struct {
	ID                uint                        `json:"id"`
	CreatedAt         time.Time                   `json:"created_at"`
	UpdatedAt         time.Time                   `json:"updated_at"`
	Title             string                      `json:"title"`
	Description       string                      `json:"description"`
	CVEID             string                      `json:"cve_id"`
	CNVDID            string                      `json:"cnvd_id"`
	OWASPCategoryID   *uint                       `json:"owasp_category_id"`
	SeverityLevel     int                         `json:"severity_level"`
	SeverityLevelText string                      `json:"severity_level_text"`
	CVSSScore         *float64                    `json:"cvss_score"`
	AssetID           uint                        `json:"asset_id"`
	DiscovererID      *uint                       `json:"discoverer_id"`
	AssigneeID        *uint                       `json:"assignee_id"`
	Status            string                      `json:"status"`
	StatusText        string                      `json:"status_text"`
	ImpactScope       string                      `json:"impact_scope"`
	ReproductionSteps string                      `json:"reproduction_steps"`
	FixSuggestion     string                      `json:"fix_suggestion"`
	DiscoveredAt      time.Time                   `json:"discovered_at"`
	AssignedAt        *time.Time                  `json:"assigned_at"`
	FixedAt           *time.Time                  `json:"fixed_at"`
	VerifiedAt        *time.Time                  `json:"verified_at"`
	ClosedAt          *time.Time                  `json:"closed_at"`
	Asset             AssetInfo                   `json:"asset"`
	Discoverer        *UserInfo                   `json:"discoverer,omitempty"`
	Assignee          *UserInfo                   `json:"assignee,omitempty"`
	OWASPCategory     *OWASPCategory              `json:"owasp_category,omitempty"`
	Attachments       []VulnerabilityAttachment   `json:"attachments,omitempty"`
}

// ToVulnerabilityInfo 转换为漏洞信息
func (v *Vulnerability) ToVulnerabilityInfo() VulnerabilityInfo {
	info := VulnerabilityInfo{
		ID:                v.ID,
		CreatedAt:         v.CreatedAt,
		UpdatedAt:         v.UpdatedAt,
		Title:             v.Title,
		Description:       v.Description,
		CVEID:             v.CVEID,
		CNVDID:            v.CNVDID,
		OWASPCategoryID:   v.OWASPCategoryID,
		SeverityLevel:     v.SeverityLevel,
		SeverityLevelText: v.GetSeverityLevelText(),
		CVSSScore:         v.CVSSScore,
		AssetID:           v.AssetID,
		DiscovererID:      v.DiscovererID,
		AssigneeID:        v.AssigneeID,
		Status:            v.Status,
		StatusText:        v.GetStatusText(),
		ImpactScope:       v.ImpactScope,
		ReproductionSteps: v.ReproductionSteps,
		FixSuggestion:     v.FixSuggestion,
		DiscoveredAt:      v.DiscoveredAt,
		AssignedAt:        v.AssignedAt,
		FixedAt:           v.FixedAt,
		VerifiedAt:        v.VerifiedAt,
		ClosedAt:          v.ClosedAt,
		Asset:             v.Asset.ToAssetInfo(),
		OWASPCategory:     v.OWASPCategory,
		Attachments:       v.Attachments,
	}

	if v.Discoverer != nil {
		discovererInfo := v.Discoverer.ToUserInfo()
		info.Discoverer = &discovererInfo
	}

	if v.Assignee != nil {
		assigneeInfo := v.Assignee.ToUserInfo()
		info.Assignee = &assigneeInfo
	}

	return info
}

// GetSeverityLevelText 获取严重程度文本
func (v *Vulnerability) GetSeverityLevelText() string {
	switch v.SeverityLevel {
	case 1:
		return "严重"
	case 2:
		return "高危"
	case 3:
		return "中危"
	case 4:
		return "低危"
	default:
		return "未知"
	}
}

// GetStatusText 获取状态文本
func (v *Vulnerability) GetStatusText() string {
	switch v.Status {
	case "new":
		return "新建"
	case "processing":
		return "处理中"
	case "fixed":
		return "已修复"
	case "verified":
		return "已验证"
	case "closed":
		return "已关闭"
	default:
		return "未知"
	}
}

// 漏洞严重程度常量
const (
	SeverityCritical = 1 // 严重
	SeverityHigh     = 2 // 高危
	SeverityMedium   = 3 // 中危
	SeverityLow      = 4 // 低危
)

// 漏洞状态常量
const (
	StatusNew        = "new"
	StatusProcessing = "processing"
	StatusFixed      = "fixed"
	StatusVerified   = "verified"
	StatusClosed     = "closed"
)
